{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/constants.ts"],"sourcesContent":["const Headers = {\n  NextRewrite: 'x-middleware-rewrite',\n  NextResume: 'x-middleware-next',\n  NextRedirect: 'Location',\n  // Used by next to identify internal navigation for app router\n  NextUrl: 'next-url',\n  NextAction: 'next-action',\n  // Used by next to identify internal navigation for pages router\n  NextjsData: 'x-nextjs-data',\n} as const;\n\nexport const constants = {\n  Headers,\n} as const;\n"],"names":[],"mappings":";;;AAAA,MAAM,UAAU;IACd,aAAa;IACb,YAAY;IACZ,cAAc;IAAA,8DAAA;IAEd,SAAS;IACT,YAAY;IAAA,gEAAA;IAEZ,YAAY;AACd;AAEO,MAAM,YAAY;IACvB;AACF"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/utils/response.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nimport { constants as nextConstants } from '../constants';\n\n/**\n * A function that merges two Response objects into a single response.\n * The final response respects the body and the status of the last response,\n * but the cookies and headers of all responses are merged.\n */\nexport const mergeResponses = (...responses: (NextResponse | Response | null | undefined | void)[]) => {\n  const normalisedResponses = responses.filter(Boolean).map(res => {\n    // If the response is a NextResponse, we can just return it\n    if (res instanceof NextResponse) {\n      return res;\n    }\n\n    return new NextResponse(res!.body, res!);\n  });\n\n  if (normalisedResponses.length === 0) {\n    return;\n  }\n\n  const lastResponse = normalisedResponses[normalisedResponses.length - 1];\n  const finalResponse = new NextResponse(lastResponse.body, lastResponse);\n\n  for (const response of normalisedResponses) {\n    response.headers.forEach((value: string, name: string) => {\n      finalResponse.headers.set(name, value);\n    });\n\n    response.cookies.getAll().forEach(cookie => {\n      const { name, value, ...options } = cookie;\n\n      finalResponse.cookies.set(name, value, options);\n    });\n  }\n\n  return finalResponse;\n};\n\nexport const isRedirect = (res: Response) => {\n  return res.headers.get(nextConstants.Headers.NextRedirect);\n};\n\nexport const setHeader = <T extends Response>(res: T, name: string, val: string): T => {\n  res.headers.set(name, val);\n  return res;\n};\n\nexport const stringifyHeaders = (headers: { forEach: Headers['forEach'] }) => {\n  if (!headers) {\n    return JSON.stringify({});\n  }\n\n  const obj: Record<string, string> = {};\n  headers.forEach((value, name) => {\n    obj[name] = value;\n  });\n  return JSON.stringify(obj);\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AASO,MAAM,iBAAiB,CAAA,GAAI;IAChC,MAAM,sBAAsB,UAAU,MAAA,CAAO,SAAS,GAAA,CAAI,CAAA;QAExD,IAAI,eAAe,0RAAA,CAAA,eAAA,EAAc;YAC/B,OAAO;QACT;QAEA,OAAO,IAAI,0RAAA,CAAA,eAAA,CAAa,IAAK,IAAA,EAAM;IACrC;IAEA,IAAI,oBAAoB,MAAA,KAAW,GAAG;QACpC;IACF;IAEA,MAAM,eAAe,mBAAA,CAAoB,oBAAoB,MAAA,GAAS,EAAC;IACvE,MAAM,gBAAgB,IAAI,0RAAA,CAAA,eAAA,CAAa,aAAa,IAAA,EAAM;IAE1D,KAAA,MAAW,YAAY,oBAAqB;QAC1C,SAAS,OAAA,CAAQ,OAAA,CAAQ,CAAC,OAAe;YACvC,cAAc,OAAA,CAAQ,GAAA,CAAI,MAAM;QAClC;QAEA,SAAS,OAAA,CAAQ,MAAA,GAAS,OAAA,CAAQ,CAAA;YAChC,MAAM,EAAE,IAAA,EAAM,KAAA,EAAO,GAAG,SAAQ,GAAI;YAEpC,cAAc,OAAA,CAAQ,GAAA,CAAI,MAAM,OAAO;QACzC;IACF;IAEA,OAAO;AACT;AAEO,MAAM,aAAa,CAAC;IACzB,OAAO,IAAI,OAAA,CAAQ,GAAA,CAAI,mSAAA,CAAA,YAAA,CAAc,OAAA,CAAQ,YAAY;AAC3D;AAEO,MAAM,YAAY,CAAqB,KAAQ,MAAc;IAClE,IAAI,OAAA,CAAQ,GAAA,CAAI,MAAM;IACtB,OAAO;AACT;AAEO,MAAM,mBAAmB,CAAC;IAC/B,IAAI,CAAC,SAAS;QACZ,OAAO,KAAK,SAAA,CAAU,CAAC;IACzB;IAEA,MAAM,MAA8B,CAAC;IACrC,QAAQ,OAAA,CAAQ,CAAC,OAAO;QACtB,GAAA,CAAI,KAAI,GAAI;IACd;IACA,OAAO,KAAK,SAAA,CAAU;AACxB"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/utils/serverRedirectWithAuth.ts"],"sourcesContent":["// Middleware runs on the server side, before clerk-js is loaded, that's why we need Cookies.\nimport type { ClerkRequest } from '@clerk/backend/internal';\nimport { constants } from '@clerk/backend/internal';\nimport { DEV_BROWSER_JWT_KEY, setDevBrowserJWTInURL } from '@clerk/shared/devBrowser';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { NextResponse } from 'next/server';\n\n/**\n * Grabs the dev browser JWT from cookies and appends it to the redirect URL when redirecting to cross-origin.\n */\nexport const serverRedirectWithAuth = (clerkRequest: ClerkRequest, res: Response, opts: { secretKey: string }) => {\n  const location = res.headers.get('location');\n  const shouldAppendDevBrowser = res.headers.get(constants.Headers.ClerkRedirectTo) === 'true';\n\n  if (\n    shouldAppendDevBrowser &&\n    !!location &&\n    isDevelopmentFromSecretKey(opts.secretKey) &&\n    clerkRequest.clerkUrl.isCrossOrigin(location)\n  ) {\n    const dbJwt = clerkRequest.cookies.get(DEV_BROWSER_JWT_KEY) || '';\n    // Next.js 12.1+ allows redirects only to absolute URLs\n    const url = new URL(location);\n    const urlWithDevBrowser = setDevBrowserJWTInURL(url, dbJwt);\n    return NextResponse.redirect(urlWithDevBrowser.href, res);\n  }\n  return res;\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAUO,MAAM,yBAAyB,CAAC,cAA4B,KAAe;IAChF,MAAM,WAAW,IAAI,OAAA,CAAQ,GAAA,CAAI;IACjC,MAAM,yBAAyB,IAAI,OAAA,CAAQ,GAAA,CAAI,kSAAA,CAAA,YAAA,CAAU,OAAA,CAAQ,eAAe,MAAM;IAEtF,IACE,0BACA,CAAC,CAAC,YACF,CAAA,GAAA,gRAAA,CAAA,6BAAA,EAA2B,KAAK,SAAS,KACzC,aAAa,QAAA,CAAS,aAAA,CAAc,WACpC;QACA,MAAM,QAAQ,aAAa,OAAA,CAAQ,GAAA,CAAI,gRAAA,CAAA,sBAAmB,KAAK;QAE/D,MAAM,MAAM,IAAI,IAAI;QACpB,MAAM,oBAAoB,CAAA,GAAA,gRAAA,CAAA,wBAAA,EAAsB,KAAK;QACrD,OAAO,0RAAA,CAAA,eAAA,CAAa,QAAA,CAAS,kBAAkB,IAAA,EAAM;IACvD;IACA,OAAO;AACT"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/utils/logFormatter.ts"],"sourcesContent":["import type { LogEntry } from './debugLogger';\n\n// Move to shared once clerk/shared is used in clerk/nextjs\nconst maskSecretKey = (str: any) => {\n  if (!str || typeof str !== 'string') {\n    return str;\n  }\n\n  try {\n    return (str || '').replace(/^(sk_(live|test)_)(.+?)(.{3})$/, '$1*********$4');\n  } catch (e) {\n    return '';\n  }\n};\n\nexport const logFormatter = (entry: LogEntry) => {\n  return (Array.isArray(entry) ? entry : [entry])\n    .map(entry => {\n      if (typeof entry === 'string') {\n        return maskSecretKey(entry);\n      }\n\n      const masked = Object.fromEntries(Object.entries(entry).map(([k, v]) => [k, maskSecretKey(v)]));\n      return JSON.stringify(masked, null, 2);\n    })\n    .join(', ');\n};\n"],"names":["entry"],"mappings":";;;AAGA,MAAM,gBAAgB,CAAC;IACrB,IAAI,CAAC,OAAO,OAAO,QAAQ,UAAU;QACnC,OAAO;IACT;IAEA,IAAI;QACF,OAAA,CAAQ,OAAO,EAAA,EAAI,OAAA,CAAQ,kCAAkC;IAC/D,EAAA,OAAS,GAAG;QACV,OAAO;IACT;AACF;AAEO,MAAM,eAAe,CAAC;IAC3B,OAAA,CAAQ,MAAM,OAAA,CAAQ,SAAS,QAAQ;QAAC;KAAK,EAC1C,GAAA,CAAI,CAAAA;QACH,IAAI,OAAOA,WAAU,UAAU;YAC7B,OAAO,cAAcA;QACvB;QAEA,MAAM,SAAS,OAAO,WAAA,CAAY,OAAO,OAAA,CAAQA,QAAO,GAAA,CAAI,CAAC,CAAC,GAAG,EAAC,GAAM;gBAAC;gBAAG,cAAc;aAAG;QAC7F,OAAO,KAAK,SAAA,CAAU,QAAQ,MAAM;IACtC,GACC,IAAA,CAAK;AACV"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/utils/debugLogger.ts"],"sourcesContent":["// TODO: Replace with a more sophisticated logging solution\n\nimport nextPkg from 'next/package.json';\n\nimport { logFormatter } from './logFormatter';\n\nexport type Log = string | Record<string, unknown>;\nexport type LogEntry = Log | Log[];\nexport type Logger<L = Log> = {\n  commit: () => void;\n  debug: (...args: Array<L | (() => L)>) => void;\n  enable: () => void;\n};\n\nexport const createDebugLogger = (name: string, formatter: (val: LogEntry) => string) => (): Logger => {\n  const entries: LogEntry[] = [];\n  let isEnabled = false;\n\n  return {\n    enable: () => {\n      isEnabled = true;\n    },\n    debug: (...args) => {\n      if (isEnabled) {\n        entries.push(args.map(arg => (typeof arg === 'function' ? arg() : arg)));\n      }\n    },\n    commit: () => {\n      if (isEnabled) {\n        console.log(debugLogHeader(name));\n\n        /**\n         * We buffer each collected log entry so we can format them and log them all at once.\n         * Individual console.log calls are used to ensure we don't hit platform-specific log limits (Vercel and Netlify are 4kb).\n         */\n        for (const log of entries) {\n          let output = formatter(log);\n\n          output = output\n            .split('\\n')\n            .map(l => `  ${l}`)\n            .join('\\n');\n\n          // Vercel errors if the output is > 4kb, so we truncate it\n          if (process.env.VERCEL) {\n            output = truncate(output, 4096);\n          }\n\n          console.log(output);\n        }\n\n        console.log(debugLogFooter(name));\n      }\n    },\n  };\n};\n\ntype WithLogger = <L extends Logger, H extends (...args: any[]) => any>(\n  loggerFactoryOrName: string | (() => L),\n  handlerCtor: (logger: Omit<L, 'commit'>) => H,\n) => H;\n\nexport const withLogger: WithLogger = (loggerFactoryOrName, handlerCtor) => {\n  return ((...args: any) => {\n    const factory =\n      typeof loggerFactoryOrName === 'string'\n        ? createDebugLogger(loggerFactoryOrName, logFormatter)\n        : loggerFactoryOrName;\n\n    const logger = factory();\n    const handler = handlerCtor(logger as any);\n\n    try {\n      const res = handler(...args);\n      if (typeof res === 'object' && 'then' in res && typeof res.then === 'function') {\n        return res\n          .then((val: any) => {\n            logger.commit();\n            return val;\n          })\n          .catch((err: any) => {\n            logger.commit();\n            throw err;\n          });\n      }\n      // handle sync methods\n      logger.commit();\n      return res;\n    } catch (err: any) {\n      logger.commit();\n      throw err;\n    }\n  }) as ReturnType<typeof handlerCtor>;\n};\n\nfunction debugLogHeader(name: string) {\n  return `[clerk debug start: ${name}]`;\n}\n\nfunction debugLogFooter(name: string) {\n  return `[clerk debug end: ${name}] (@clerk/nextjs=${PACKAGE_VERSION},next=${nextPkg.version})`;\n}\n\n// ref: https://stackoverflow.com/questions/57769465/javascript-truncate-text-by-bytes-length\nfunction truncate(str: string, maxLength: number) {\n  const encoder = new TextEncoder();\n  const decoder = new TextDecoder('utf-8');\n\n  const encodedString = encoder.encode(str);\n  const truncatedString = encodedString.slice(0, maxLength);\n\n  // return the truncated string, removing any replacement characters that result from partially truncated characters\n  return decoder.decode(truncatedString).replace(/\\uFFFD/g, '');\n}\n"],"names":[],"mappings":";;;;;;;;;AAcO,MAAM,oBAAoB,CAAC,MAAc,YAAyC;QACvF,MAAM,UAAsB,EAAC;QAC7B,IAAI,YAAY;QAEhB,OAAO;YACL,QAAQ;gBACN,YAAY;YACd;YACA,OAAO,CAAA,GAAI;gBACT,IAAI,WAAW;oBACb,QAAQ,IAAA,CAAK,KAAK,GAAA,CAAI,CAAA,MAAQ,OAAO,QAAQ,aAAa,QAAQ;gBACpE;YACF;YACA,QAAQ;gBACN,IAAI,WAAW;oBACb,QAAQ,GAAA,CAAI,eAAe;oBAM3B,KAAA,MAAW,OAAO,QAAS;wBACzB,IAAI,SAAS,UAAU;wBAEvB,SAAS,OACN,KAAA,CAAM,MACN,GAAA,CAAI,CAAA,IAAK,CAAA,EAAA,EAAK,EAAC,CAAE,EACjB,IAAA,CAAK;wBAGR,IAAI,QAAQ,GAAA,CAAI,MAAA,EAAQ;4BACtB,SAAS,SAAS,QAAQ;wBAC5B;wBAEA,QAAQ,GAAA,CAAI;oBACd;oBAEA,QAAQ,GAAA,CAAI,eAAe;gBAC7B;YACF;QACF;IACF;AAOO,MAAM,aAAyB,CAAC,qBAAqB;IAC1D,OAAQ,CAAA,GAAI;QACV,MAAM,UACJ,OAAO,wBAAwB,WAC3B,kBAAkB,qBAAqB,+SAAA,CAAA,eAAY,IACnD;QAEN,MAAM,SAAS;QACf,MAAM,UAAU,YAAY;QAE5B,IAAI;YACF,MAAM,MAAM,WAAW;YACvB,IAAI,OAAO,QAAQ,YAAY,UAAU,OAAO,OAAO,IAAI,IAAA,KAAS,YAAY;gBAC9E,OAAO,IACJ,IAAA,CAAK,CAAC;oBACL,OAAO,MAAA;oBACP,OAAO;gBACT,GACC,KAAA,CAAM,CAAC;oBACN,OAAO,MAAA;oBACP,MAAM;gBACR;YACJ;YAEA,OAAO,MAAA;YACP,OAAO;QACT,EAAA,OAAS,KAAU;YACjB,OAAO,MAAA;YACP,MAAM;QACR;IACF;AACF;AAEA,SAAS,eAAe,IAAA;IACtB,OAAO,CAAA,oBAAA,EAAuB,KAAI,CAAA,CAAA;AACpC;AAEA,SAAS,eAAe,IAAA;IACtB,OAAO,CAAA,kBAAA,EAAqB,KAAI,iBAAA,EAAoB,QAAe,MAAA,EAAS,4MAAA,CAAA,UAAA,CAAQ,OAAO,CAAA,CAAA,CAAA;AAC7F;AAGA,SAAS,SAAS,GAAA,EAAa,SAAA;IAC7B,MAAM,UAAU,IAAI;IACpB,MAAM,UAAU,IAAI,YAAY;IAEhC,MAAM,gBAAgB,QAAQ,MAAA,CAAO;IACrC,MAAM,kBAAkB,cAAc,KAAA,CAAM,GAAG;IAG/C,OAAO,QAAQ,MAAA,CAAO,iBAAiB,OAAA,CAAQ,WAAW;AAC5D"}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/app-router/server/utils.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n\nexport const isPrerenderingBailout = (e: unknown) => {\n  if (!(e instanceof Error) || !('message' in e)) {\n    return false;\n  }\n\n  const { message } = e;\n\n  const lowerCaseInput = message.toLowerCase();\n  const dynamicServerUsage = lowerCaseInput.includes('dynamic server usage');\n  const bailOutPrerendering = lowerCaseInput.includes('this page needs to bail out of prerendering');\n\n  // note: new error message syntax introduced in next@14.1.1-canary.21\n  // but we still want to support older versions.\n  // https://github.com/vercel/next.js/pull/61332 (dynamic-rendering.ts:153)\n  const routeRegex = /Route .*? needs to bail out of prerendering at this point because it used .*?./;\n\n  return routeRegex.test(message) || dynamicServerUsage || bailOutPrerendering;\n};\n\nexport const buildRequestLike = () => {\n  try {\n    // Dynamically import next/headers, otherwise Next12 apps will break\n    // because next/headers was introduced in next@13\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { headers } = require('next/headers');\n    return new NextRequest('https://placeholder.com', { headers: headers() });\n  } catch (e: any) {\n    // rethrow the error when react throws a prerendering bailout\n    // https://nextjs.org/docs/messages/ppr-caught-error\n    if (e && isPrerenderingBailout(e)) {\n      throw e;\n    }\n\n    throw new Error(\n      `Clerk: auth() and currentUser() are only supported in App Router (/app directory).\\nIf you're using /pages, try getAuth() instead.\\nOriginal error: ${e}`,\n    );\n  }\n};\n\n// Original source: https://github.com/vercel/next.js/blob/canary/packages/next/src/server/app-render/get-script-nonce-from-header.tsx\nexport function getScriptNonceFromHeader(cspHeaderValue: string): string | undefined {\n  const directives = cspHeaderValue\n    // Directives are split by ';'.\n    .split(';')\n    .map(directive => directive.trim());\n\n  // First try to find the directive for the 'script-src', otherwise try to\n  // fallback to the 'default-src'.\n  const directive =\n    directives.find(dir => dir.startsWith('script-src')) || directives.find(dir => dir.startsWith('default-src'));\n\n  // If no directive could be found, then we're done.\n  if (!directive) {\n    return;\n  }\n\n  // Extract the nonce from the directive\n  const nonce = directive\n    .split(' ')\n    // Remove the 'strict-src'/'default-src' string, this can't be the nonce.\n    .slice(1)\n    .map(source => source.trim())\n    // Find the first source with the 'nonce-' prefix.\n    .find(source => source.startsWith(\"'nonce-\") && source.length > 8 && source.endsWith(\"'\"))\n    // Grab the nonce by trimming the 'nonce-' prefix.\n    ?.slice(7, -1);\n\n  // If we could't find the nonce, then we're done.\n  if (!nonce) {\n    return;\n  }\n\n  // Don't accept the nonce value if it contains HTML escape characters.\n  // Technically, the spec requires a base64'd value, but this is just an\n  // extra layer.\n  if (/[&><\\u2028\\u2029]/g.test(nonce)) {\n    throw new Error(\n      'Nonce value from Content-Security-Policy contained invalid HTML escape characters, which is disallowed for security reasons. Make sure that your nonce value does not contain the following characters: `<`, `>`, `&`',\n    );\n  }\n\n  return nonce;\n}\n"],"names":["directive"],"mappings":";;;;;;;;;AAEO,MAAM,wBAAwB,CAAC;IACpC,IAAI,CAAA,CAAE,aAAa,KAAA,KAAU,CAAA,CAAE,aAAa,CAAA,GAAI;QAC9C,OAAO;IACT;IAEA,MAAM,EAAE,OAAA,EAAQ,GAAI;IAEpB,MAAM,iBAAiB,QAAQ,WAAA;IAC/B,MAAM,qBAAqB,eAAe,QAAA,CAAS;IACnD,MAAM,sBAAsB,eAAe,QAAA,CAAS;IAKpD,MAAM,aAAa;IAEnB,OAAO,WAAW,IAAA,CAAK,YAAY,sBAAsB;AAC3D;AAEO,MAAM,mBAAmB;IAC9B,IAAI;QAIF,MAAM,EAAE,OAAA,EAAQ;QAChB,OAAO,IAAI,yRAAA,CAAA,cAAA,CAAY,2BAA2B;YAAE,SAAS;QAAU;IACzE,EAAA,OAAS,GAAQ;QAGf,IAAI,KAAK,sBAAsB,IAAI;YACjC,MAAM;QACR;QAEA,MAAM,IAAI,MACR,CAAA;;gBAAA,EAAuJ,EAAC,CAAA;IAE5J;AACF;AAGO,SAAS,yBAAyB,cAAA;IA1CzC,IAAA;IA2CE,MAAM,aAAa,eAEhB,KAAA,CAAM,KACN,GAAA,CAAI,CAAAA,aAAaA,WAAU,IAAA;IAI9B,MAAM,YACJ,WAAW,IAAA,CAAK,CAAA,MAAO,IAAI,UAAA,CAAW,kBAAkB,WAAW,IAAA,CAAK,CAAA,MAAO,IAAI,UAAA,CAAW;IAGhG,IAAI,CAAC,WAAW;QACd;IACF;IAGA,MAAM,QAAA,CAAQ,KAAA,UACX,KAAA,CAAM,KAEN,KAAA,CAAM,GACN,GAAA,CAAI,CAAA,SAAU,OAAO,IAAA,IAErB,IAAA,CAAK,CAAA,SAAU,OAAO,UAAA,CAAW,cAAc,OAAO,MAAA,GAAS,KAAK,OAAO,QAAA,CAAS,KAAI,KAN7E,OAAA,KAAA,IAAA,GAQV,KAAA,CAAM,GAAG,CAAA;IAGb,IAAI,CAAC,OAAO;QACV;IACF;IAKA,IAAI,qBAAqB,IAAA,CAAK,QAAQ;QACpC,MAAM,IAAI,MACR;IAEJ;IAEA,OAAO;AACT"}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 294, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/constants.ts"],"sourcesContent":["import { apiUrlFromPublishableKey } from '@clerk/shared/apiUrlFromPublishableKey';\nimport { isTruthy } from '@clerk/shared/underscore';\n\nexport const CLERK_JS_VERSION = process.env.NEXT_PUBLIC_CLERK_JS_VERSION || '';\nexport const CLERK_JS_URL = process.env.NEXT_PUBLIC_CLERK_JS_URL || '';\nexport const API_VERSION = process.env.CLERK_API_VERSION || 'v1';\nexport const SECRET_KEY = process.env.CLERK_SECRET_KEY || '';\nexport const PUBLISHABLE_KEY = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY || '';\nexport const ENCRYPTION_KEY = process.env.CLERK_ENCRYPTION_KEY || '';\nexport const API_URL = process.env.CLERK_API_URL || apiUrlFromPublishableKey(PUBLISHABLE_KEY);\nexport const DOMAIN = process.env.NEXT_PUBLIC_CLERK_DOMAIN || '';\nexport const PROXY_URL = process.env.NEXT_PUBLIC_CLERK_PROXY_URL || '';\nexport const IS_SATELLITE = isTruthy(process.env.NEXT_PUBLIC_CLERK_IS_SATELLITE) || false;\nexport const SIGN_IN_URL = process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || '';\nexport const SIGN_UP_URL = process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL || '';\nexport const SDK_METADATA = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n  environment: process.env.NODE_ENV,\n};\n\nexport const TELEMETRY_DISABLED = isTruthy(process.env.NEXT_PUBLIC_CLERK_TELEMETRY_DISABLED);\nexport const TELEMETRY_DEBUG = isTruthy(process.env.NEXT_PUBLIC_CLERK_TELEMETRY_DEBUG);\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAGO,MAAM,mBAAmB,QAAQ,GAAA,CAAI,4BAAA,IAAgC;AACrE,MAAM,eAAe,QAAQ,GAAA,CAAI,wBAAA,IAA4B;AAC7D,MAAM,cAAc,QAAQ,GAAA,CAAI,iBAAA,IAAqB;AACrD,MAAM,aAAa,QAAQ,GAAA,CAAI,gBAAA,IAAoB;AACnD,MAAM,kBAAkB,kGAAiD;AACzE,MAAM,iBAAiB,QAAQ,GAAA,CAAI,oBAAA,IAAwB;AAC3D,MAAM,UAAU,QAAQ,GAAA,CAAI,aAAA,IAAiB,CAAA,GAAA,gRAAA,CAAA,2BAAA,EAAyB;AACtE,MAAM,SAAS,QAAQ,GAAA,CAAI,wBAAA,IAA4B;AACvD,MAAM,YAAY,QAAQ,GAAA,CAAI,2BAAA,IAA+B;AAC7D,MAAM,eAAe,CAAA,GAAA,gRAAA,CAAA,WAAA,EAAS,QAAQ,GAAA,CAAI,8BAA8B,KAAK;AAC7E,MAAM,cAAc,QAAQ,GAAA,CAAI,6BAAA,IAAiC;AACjE,MAAM,cAAc,QAAQ,GAAA,CAAI,6BAAA,IAAiC;AACjE,MAAM,eAAe;IAC1B,MAAM;IACN,SAAS;IACT,WAAA;AACF;AAEO,MAAM,qBAAqB,CAAA,GAAA,gRAAA,CAAA,WAAA,EAAS,QAAQ,GAAA,CAAI,oCAAoC;AACpF,MAAM,kBAAkB,CAAA,GAAA,gRAAA,CAAA,WAAA,EAAS,QAAQ,GAAA,CAAI,iCAAiC"}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/errors.ts"],"sourcesContent":["export const missingDomainAndProxy = `\nMissing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl.\n\n1) With middleware\n   e.g. export default clerkMiddleware({domain:'YOUR_DOMAIN',isSatellite:true}); // or the deprecated authMiddleware()\n2) With environment variables e.g.\n   NEXT_PUBLIC_CLERK_DOMAIN='YOUR_DOMAIN'\n   NEXT_PUBLIC_CLERK_IS_SATELLITE='true'\n   `;\n\nexport const missingSignInUrlInDev = `\nInvalid signInUrl. A satellite application requires a signInUrl for development instances.\nCheck if signInUrl is missing from your configuration or if it is not an absolute URL\n\n1) With middleware\n   e.g. export default clerkMiddleware({signInUrl:'SOME_URL', isSatellite:true}); // or the deprecated authMiddleware()\n2) With environment variables e.g.\n   NEXT_PUBLIC_CLERK_SIGN_IN_URL='SOME_URL'\n   NEXT_PUBLIC_CLERK_IS_SATELLITE='true'`;\n\nexport const receivedRequestForIgnoredRoute = (url: string, matcher: string) =>\n  `Clerk: The middleware was skipped for this request URL: ${url}. For performance reasons, it's recommended to your middleware matcher to:\nexport const config = {\n  matcher: ${matcher},\n};\n\nAlternatively, you can set your own ignoredRoutes. See https://clerk.com/docs/nextjs/middleware\n(This log only appears in development mode)\n`;\n\nexport const getAuthAuthHeaderMissing = () => authAuthHeaderMissing('getAuth');\n\nexport const authAuthHeaderMissing = (helperName = 'auth') =>\n  `Clerk: ${helperName}() was called but Clerk can't detect usage of clerkMiddleware() (or the deprecated authMiddleware()). Please ensure the following:\n-  clerkMiddleware() (or the deprecated authMiddleware()) is used in your Next.js Middleware.\n- Your Middleware matcher is configured to match this route or page.\n- If you are using the src directory, make sure the Middleware file is inside of it.\n\nFor more details, see https://clerk.com/docs/quickstarts/nextjs\n`;\n\nexport const clockSkewDetected = (verifyMessage: string) =>\n  `Clerk: Clock skew detected. This usually means that your system clock is inaccurate. Clerk will continuously try to issue new tokens, as the existing ones will be treated as \"expired\" due to clock skew.\n\nTo resolve this issue, make sure your system's clock is set to the correct time (e.g. turn off and on automatic time synchronization).\n\n---\n\n${verifyMessage}`;\n\nexport const infiniteRedirectLoopDetected = () =>\n  `Clerk: Infinite redirect loop detected. That usually means that we were not able to determine the auth state for this request. A list of common causes and solutions follows.\n\nReason 1:\nYour Clerk instance keys are incorrect, or you recently changed keys (Publishable Key, Secret Key).\nHow to resolve:\n-> Make sure you're using the correct keys from the Clerk Dashboard. If you changed keys recently, make sure to clear your browser application data and cookies.\n\nReason 2:\nA bug that may have already been fixed in the latest version of Clerk NextJS package.\nHow to resolve:\n-> Make sure you are using the latest version of '@clerk/nextjs' and 'next'.\n`;\n\nexport const informAboutProtectedRouteInfo = (\n  path: string,\n  hasPublicRoutes: boolean,\n  hasIgnoredRoutes: boolean,\n  isApiRoute: boolean,\n  defaultIgnoredRoutes: string[],\n) => {\n  const infoText = isApiRoute\n    ? `INFO: Clerk: The request to ${path} is being protected (401) because there is no signed-in user, and the path is included in \\`apiRoutes\\`. To prevent this behavior, choose one of:`\n    : `INFO: Clerk: The request to ${path} is being redirected because there is no signed-in user, and the path is not included in \\`ignoredRoutes\\` or \\`publicRoutes\\`. To prevent this behavior, choose one of:`;\n  const apiRoutesText = isApiRoute\n    ? `To prevent Clerk authentication from protecting (401) the api route, remove the rule matching \"${path}\" from the \\`apiRoutes\\` array passed to authMiddleware`\n    : undefined;\n  const publicRoutesText = hasPublicRoutes\n    ? `To make the route accessible to both signed in and signed out users, add \"${path}\" to the \\`publicRoutes\\` array passed to authMiddleware`\n    : `To make the route accessible to both signed in and signed out users, pass \\`publicRoutes: [\"${path}\"]\\` to authMiddleware`;\n  const ignoredRoutes = [...defaultIgnoredRoutes, path].map(r => `\"${r}\"`).join(', ');\n  const ignoredRoutesText = hasIgnoredRoutes\n    ? `To prevent Clerk authentication from running at all, add \"${path}\" to the \\`ignoredRoutes\\` array passed to authMiddleware`\n    : `To prevent Clerk authentication from running at all, pass \\`ignoredRoutes: [${ignoredRoutes}]\\` to authMiddleware`;\n  const afterAuthText =\n    \"Pass a custom `afterAuth` to authMiddleware, and replace Clerk's default behavior of redirecting unless a route is included in publicRoutes\";\n\n  return `${infoText}\n\n${[apiRoutesText, publicRoutesText, ignoredRoutesText, afterAuthText]\n  .filter(Boolean)\n  .map((text, index) => `${index + 1}. ${text}`)\n  .join('\\n')}\n\nFor additional information about middleware, please visit https://clerk.com/docs/nextjs/middleware\n(This log only appears in development mode, or if \\`debug: true\\` is passed to authMiddleware)`;\n};\n\nexport const authSignatureInvalid = `Clerk: Unable to verify request, this usually means the Clerk middleware did not run. Ensure Clerk's middleware is properly integrated and matches the current route. For more information, see: https://clerk.com/docs/nextjs/middleware. (code=auth_signature_invalid)`;\n\nexport const encryptionKeyInvalid = `Clerk: Unable to decrypt request data, this usually means the encryption key is invalid. Ensure the encryption key is properly set. For more information, see: https://clerk.com/docs/references/nextjs/clerk-middleware#dynamic-keys. (code=encryption_key_invalid)`;\n"],"names":[],"mappings":";;;;;;;;;;;;AAAO,MAAM,wBAAwB,CAAA;;;;;;;;GAAA,CAAA;AAU9B,MAAM,wBAAwB,CAAA;;;;;;;;wCAAA,CAAA;AAU9B,MAAM,iCAAiC,CAAC,KAAa,UAC1D,CAAA,wDAAA,EAA2D,IAAG;;WAAA,EAEnD,QAAO;;;;;AAAA,CAAA;AAOb,MAAM,2BAA2B,IAAM,sBAAsB;AAE7D,MAAM,wBAAwB,CAAC,aAAa,MAAA,GACjD,CAAA,OAAA,EAAU,WAAU;;;;;;AAAA,CAAA;AAQf,MAAM,oBAAoB,CAAC,gBAChC,CAAA;;;;;;AAAA,EAMA,cAAa,CAAA;AAER,MAAM,+BAA+B,IAC1C,CAAA;;;;;;;;;;;AAAA,CAAA;AAaK,MAAM,gCAAgC,CAC3C,MACA,iBACA,kBACA,YACA;IAEA,MAAM,WAAW,aACb,CAAA,4BAAA,EAA+B,KAAI,iJAAA,CAAA,GACnC,CAAA,4BAAA,EAA+B,KAAI,wKAAA,CAAA;IACvC,MAAM,gBAAgB,aAClB,CAAA,+FAAA,EAAkG,KAAI,uDAAA,CAAA,GACtG,KAAA;IACJ,MAAM,mBAAmB,kBACrB,CAAA,0EAAA,EAA6E,KAAI,wDAAA,CAAA,GACjF,CAAA,4FAAA,EAA+F,KAAI,sBAAA,CAAA;IACvG,MAAM,gBAAgB;WAAI;QAAsB;KAAI,CAAE,GAAA,CAAI,CAAA,IAAK,CAAA,CAAA,EAAI,EAAC,CAAA,CAAG,EAAE,IAAA,CAAK;IAC9E,MAAM,oBAAoB,mBACtB,CAAA,0DAAA,EAA6D,KAAI,yDAAA,CAAA,GACjE,CAAA,4EAAA,EAA+E,cAAa,qBAAA,CAAA;IAChG,MAAM,gBACJ;IAEF,OAAO,CAAA,EAAG,SAAQ;;AAAA,EAElB;QAAC;QAAe;QAAkB;QAAmB;KAAa,CACjE,MAAA,CAAO,SACP,GAAA,CAAI,CAAC,MAAM,QAAU,CAAA,EAAG,QAAQ,EAAC,EAAA,EAAK,KAAI,CAAE,EAC5C,IAAA,CAAK,MAAK;;;8FAAA,CAAA;AAIb;AAEO,MAAM,uBAAuB,CAAA,wQAAA,CAAA;AAE7B,MAAM,uBAAuB,CAAA,oQAAA,CAAA"}},
    {"offset": {"line": 435, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 440, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/errorThrower.ts"],"sourcesContent":["import { buildErrorThrower } from '@clerk/shared/error';\n\nexport const errorThrower = buildErrorThrower({ packageName: '@clerk/nextjs' });\n"],"names":[],"mappings":";;;;;;;AAEO,MAAM,eAAe,CAAA,GAAA,gRAAA,CAAA,oBAAA,EAAkB;IAAE,aAAa;AAAgB"}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/utils.ts"],"sourcesContent":["import type { AuthenticateRequestOptions, ClerkRequest, RequestState } from '@clerk/backend/internal';\nimport { constants } from '@clerk/backend/internal';\nimport { handleValueOrFn } from '@clerk/shared/handleValueOrFn';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { logger } from '@clerk/shared/logger';\nimport { isHttpOrHttps } from '@clerk/shared/proxy';\nimport AES from 'crypto-js/aes';\nimport encUtf8 from 'crypto-js/enc-utf8';\nimport hmacSHA1 from 'crypto-js/hmac-sha1';\nimport type { NextRequest } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nimport { constants as nextConstants } from '../constants';\nimport { DOMAIN, ENCRYPTION_KEY, IS_SATELLITE, PROXY_URL, SECRET_KEY, SIGN_IN_URL } from './constants';\nimport { authSignatureInvalid, encryptionKeyInvalid, missingDomainAndProxy, missingSignInUrlInDev } from './errors';\nimport { errorThrower } from './errorThrower';\nimport type { RequestLike } from './types';\n\nexport function setCustomAttributeOnRequest(req: RequestLike, key: string, value: string): void {\n  Object.assign(req, { [key]: value });\n}\n\nexport function getCustomAttributeFromRequest(req: RequestLike, key: string): string | null | undefined {\n  // @ts-expect-error - TS doesn't like indexing into RequestLike\n  return key in req ? req[key] : undefined;\n}\n\nexport function getAuthKeyFromRequest(\n  req: RequestLike,\n  key: keyof typeof constants.Attributes,\n): string | null | undefined {\n  return getCustomAttributeFromRequest(req, constants.Attributes[key]) || getHeader(req, constants.Headers[key]);\n}\n\n// TODO: Rename Auth status and align the naming across media\nexport function getAuthStatusFromRequest(req: RequestLike): string | null | undefined {\n  return (\n    getCustomAttributeFromRequest(req, constants.Attributes.AuthStatus) || getHeader(req, constants.Headers.AuthStatus)\n  );\n}\n\nexport function getHeader(req: RequestLike, name: string): string | null | undefined {\n  if (isNextRequest(req)) {\n    return req.headers.get(name);\n  }\n\n  // If no header has been determined for IncomingMessage case, check if available within private `socket` headers\n  // When deployed to vercel, req.headers for API routes is a `IncomingHttpHeaders` key-val object which does not follow\n  // the Headers spec so the name is no longer case-insensitive.\n  return req.headers[name] || req.headers[name.toLowerCase()] || (req.socket as any)?._httpMessage?.getHeader(name);\n}\n\nexport function getCookie(req: RequestLike, name: string): string | undefined {\n  if (isNextRequest(req)) {\n    // Nextjs broke semver in the 13.0.0 -> 13.0.1 release, so even though\n    // this should be RequestCookie in all updated apps. In order to support apps\n    // using v13.0.0 still, we explicitly add the string type\n    // https://github.com/vercel/next.js/pull/41526\n    const reqCookieOrString = req.cookies.get(name) as ReturnType<NextRequest['cookies']['get']> | string | undefined;\n    if (!reqCookieOrString) {\n      return undefined;\n    }\n    return typeof reqCookieOrString === 'string' ? reqCookieOrString : reqCookieOrString.value;\n  }\n  return req.cookies[name];\n}\n\nfunction isNextRequest(val: unknown): val is NextRequest {\n  try {\n    const { headers, nextUrl, cookies } = (val || {}) as NextRequest;\n    return (\n      typeof headers?.get === 'function' &&\n      typeof nextUrl?.searchParams.get === 'function' &&\n      typeof cookies?.get === 'function'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\nconst OVERRIDE_HEADERS = 'x-middleware-override-headers';\nconst MIDDLEWARE_HEADER_PREFIX = 'x-middleware-request' as string;\n\nexport const setRequestHeadersOnNextResponse = (\n  res: NextResponse | Response,\n  req: Request,\n  newHeaders: Record<string, string>,\n) => {\n  if (!res.headers.get(OVERRIDE_HEADERS)) {\n    // Emulate a user setting overrides by explicitly adding the required nextjs headers\n    // https://github.com/vercel/next.js/pull/41380\n    // @ts-expect-error\n    res.headers.set(OVERRIDE_HEADERS, [...req.headers.keys()]);\n    req.headers.forEach((val, key) => {\n      res.headers.set(`${MIDDLEWARE_HEADER_PREFIX}-${key}`, val);\n    });\n  }\n\n  // Now that we have normalised res to include overrides, just append the new header\n  Object.entries(newHeaders).forEach(([key, val]) => {\n    res.headers.set(OVERRIDE_HEADERS, `${res.headers.get(OVERRIDE_HEADERS)},${key}`);\n    res.headers.set(`${MIDDLEWARE_HEADER_PREFIX}-${key}`, val);\n  });\n};\n\nexport const injectSSRStateIntoObject = <O, T>(obj: O, authObject: T) => {\n  // Serializing the state on dev env is a temp workaround for the following issue:\n  // https://github.com/vercel/next.js/discussions/11209|Next.js\n  const __clerk_ssr_state = (\n    process.env.NODE_ENV !== 'production' ? JSON.parse(JSON.stringify({ ...authObject })) : { ...authObject }\n  ) as T;\n  return { ...obj, __clerk_ssr_state };\n};\n\n// Auth result will be set as both a query param & header when applicable\nexport function decorateRequest(\n  req: ClerkRequest,\n  res: Response,\n  requestState: RequestState,\n  requestData?: AuthenticateRequestOptions,\n): Response {\n  const { reason, message, status, token } = requestState;\n  // pass-through case, convert to next()\n  if (!res) {\n    res = NextResponse.next();\n  }\n\n  // redirect() case, return early\n  if (res.headers.get(nextConstants.Headers.NextRedirect)) {\n    return res;\n  }\n\n  let rewriteURL;\n\n  // next() case, convert to a rewrite\n  if (res.headers.get(nextConstants.Headers.NextResume) === '1') {\n    res.headers.delete(nextConstants.Headers.NextResume);\n    rewriteURL = new URL(req.url);\n  }\n\n  // rewrite() case, set auth result only if origin remains the same\n  const rewriteURLHeader = res.headers.get(nextConstants.Headers.NextRewrite);\n\n  if (rewriteURLHeader) {\n    const reqURL = new URL(req.url);\n    rewriteURL = new URL(rewriteURLHeader);\n\n    // if the origin has changed, return early\n    if (rewriteURL.origin !== reqURL.origin) {\n      return res;\n    }\n  }\n\n  if (rewriteURL) {\n    const clerkRequestData = encryptClerkRequestData(requestData);\n\n    setRequestHeadersOnNextResponse(res, req, {\n      [constants.Headers.AuthStatus]: status,\n      [constants.Headers.AuthToken]: token || '',\n      [constants.Headers.AuthSignature]: token ? createTokenSignature(token, requestData?.secretKey ?? SECRET_KEY) : '',\n      [constants.Headers.AuthMessage]: message || '',\n      [constants.Headers.AuthReason]: reason || '',\n      [constants.Headers.ClerkUrl]: req.clerkUrl.toString(),\n      ...(clerkRequestData ? { [constants.Headers.ClerkRequestData]: clerkRequestData } : {}),\n    });\n    res.headers.set(nextConstants.Headers.NextRewrite, rewriteURL.href);\n  }\n\n  return res;\n}\n\nexport const apiEndpointUnauthorizedNextResponse = () => {\n  return NextResponse.json(null, { status: 401, statusText: 'Unauthorized' });\n};\n\nexport const isCrossOrigin = (from: string | URL, to: string | URL) => {\n  const fromUrl = new URL(from);\n  const toUrl = new URL(to);\n  return fromUrl.origin !== toUrl.origin;\n};\n\nexport const handleMultiDomainAndProxy = (clerkRequest: ClerkRequest, opts: AuthenticateRequestOptions) => {\n  const relativeOrAbsoluteProxyUrl = handleValueOrFn(opts?.proxyUrl, clerkRequest.clerkUrl, PROXY_URL);\n\n  let proxyUrl;\n  if (!!relativeOrAbsoluteProxyUrl && !isHttpOrHttps(relativeOrAbsoluteProxyUrl)) {\n    proxyUrl = new URL(relativeOrAbsoluteProxyUrl, clerkRequest.clerkUrl).toString();\n  } else {\n    proxyUrl = relativeOrAbsoluteProxyUrl;\n  }\n\n  const isSatellite = handleValueOrFn(opts.isSatellite, new URL(clerkRequest.url), IS_SATELLITE);\n  const domain = handleValueOrFn(opts.domain, new URL(clerkRequest.url), DOMAIN);\n  const signInUrl = opts?.signInUrl || SIGN_IN_URL;\n\n  if (isSatellite && !proxyUrl && !domain) {\n    throw new Error(missingDomainAndProxy);\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromSecretKey(opts.secretKey || SECRET_KEY)) {\n    throw new Error(missingSignInUrlInDev);\n  }\n\n  return {\n    proxyUrl,\n    isSatellite,\n    domain,\n    signInUrl,\n  };\n};\n\nexport const redirectAdapter = (url: string | URL) => {\n  return NextResponse.redirect(url, { headers: { [constants.Headers.ClerkRedirectTo]: 'true' } });\n};\n\nexport function assertKey(key: string, onError: () => never): string {\n  if (!key) {\n    onError();\n  }\n\n  return key;\n}\n\n/**\n * Compute a cryptographic signature from a session token and provided secret key. Used to validate that the token has not been modified when transferring between middleware and the Next.js origin.\n */\nfunction createTokenSignature(token: string, key: string): string {\n  return hmacSHA1(token, key).toString();\n}\n\n/**\n * Assert that the provided token generates a matching signature.\n */\nexport function assertTokenSignature(token: string, key: string, signature?: string | null) {\n  if (!signature) {\n    throw new Error(authSignatureInvalid);\n  }\n\n  const expectedSignature = createTokenSignature(token, key);\n  if (expectedSignature !== signature) {\n    throw new Error(authSignatureInvalid);\n  }\n}\n\n/**\n * Encrypt request data propagated between server requests.\n * @internal\n **/\nexport function encryptClerkRequestData(requestData?: Partial<AuthenticateRequestOptions>) {\n  if (!requestData || !Object.values(requestData).length) {\n    return;\n  }\n\n  if (requestData.secretKey && !ENCRYPTION_KEY) {\n    // TODO SDK-1833: change this to an error in the next major version of `@clerk/nextjs`\n    logger.warnOnce(\n      'Clerk: Missing `CLERK_ENCRYPTION_KEY`. Required for propagating `secretKey` middleware option. See docs: https://clerk.com/docs/references/nextjs/clerk-middleware#dynamic-keys',\n    );\n\n    return;\n  }\n\n  return AES.encrypt(\n    JSON.stringify(requestData),\n    ENCRYPTION_KEY || assertKey(SECRET_KEY, () => errorThrower.throwMissingSecretKeyError()),\n  ).toString();\n}\n\n/**\n * Decrypt request data propagated between server requests.\n * @internal\n */\nexport function decryptClerkRequestData(\n  encryptedRequestData?: string | undefined | null,\n): Partial<AuthenticateRequestOptions> {\n  if (!encryptedRequestData) {\n    return {};\n  }\n\n  try {\n    const decryptedBytes = AES.decrypt(encryptedRequestData, ENCRYPTION_KEY || SECRET_KEY);\n    const encoded = decryptedBytes.toString(encUtf8);\n    return JSON.parse(encoded);\n  } catch (err) {\n    throw new Error(encryptionKeyInvalid);\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/clerkClient.ts"],"sourcesContent":["import type { ClerkClient } from '@clerk/backend';\nimport { createClerkClient } from '@clerk/backend';\nimport { constants } from '@clerk/backend/internal';\nimport { deprecated } from '@clerk/shared/deprecated';\n\nimport { buildRequestLike, isPrerenderingBailout } from '../app-router/server/utils';\nimport { clerkMiddlewareRequestDataStore } from './clerkMiddleware';\nimport {\n  API_URL,\n  API_VERSION,\n  DOMAIN,\n  IS_SATELLITE,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SDK_METADATA,\n  SECRET_KEY,\n  TELEMETRY_DEBUG,\n  TELEMETRY_DISABLED,\n} from './constants';\nimport { decryptClerkRequestData, getHeader } from './utils';\n\nconst clerkClientDefaultOptions = {\n  secretKey: SECRET_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  proxyUrl: PROXY_URL,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  sdkMetadata: SDK_METADATA,\n  telemetry: {\n    disabled: TELEMETRY_DISABLED,\n    debug: TELEMETRY_DEBUG,\n  },\n};\n\nconst createClerkClientWithOptions: typeof createClerkClient = options =>\n  createClerkClient({ ...clerkClientDefaultOptions, ...options });\n\n/**\n * @deprecated\n * This singleton is deprecated and will be removed in a future release. Please use `clerkClient()` as a function instead.\n */\nconst clerkClientSingleton = createClerkClient(clerkClientDefaultOptions);\n\n/**\n * Constructs a BAPI client that accesses request data within the runtime.\n * Necessary if middleware dynamic keys are used.\n */\nconst clerkClientForRequest = () => {\n  let requestData;\n\n  try {\n    const request = buildRequestLike();\n    const encryptedRequestData = getHeader(request, constants.Headers.ClerkRequestData);\n    requestData = decryptClerkRequestData(encryptedRequestData);\n  } catch (err) {\n    if (err && isPrerenderingBailout(err)) {\n      throw err;\n    }\n  }\n\n  // Fallbacks between options from middleware runtime and `NextRequest` from application server\n  const options = clerkMiddlewareRequestDataStore.getStore() ?? requestData;\n  if (options?.secretKey || options?.publishableKey) {\n    return createClerkClientWithOptions(options);\n  }\n\n  return clerkClientSingleton;\n};\n\ninterface ClerkClientExport extends ClerkClient {\n  (): ClerkClient;\n}\n\n// TODO SDK-1839 - Remove `clerkClient` singleton in the next major version of `@clerk/nextjs`\nconst clerkClient = new Proxy(Object.assign(clerkClientForRequest, clerkClientSingleton), {\n  get(target, prop: string, receiver) {\n    deprecated('clerkClient singleton', 'Use `clerkClient()` as a function instead.');\n\n    return Reflect.get(target, prop, receiver);\n  },\n}) as ClerkClientExport;\n\nexport { clerkClient };\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAqBA,MAAM,4BAA4B;IAChC,WAAW,6SAAA,CAAA,aAAA;IACX,gBAAgB,6SAAA,CAAA,kBAAA;IAChB,QAAQ,6SAAA,CAAA,UAAA;IACR,YAAY,6SAAA,CAAA,cAAA;IACZ,WAAW,CAAA,EAAG,gBAAY,CAAA,EAAI,QAAe,CAAA;IAC7C,UAAU,6SAAA,CAAA,YAAA;IACV,QAAQ,6SAAA,CAAA,SAAA;IACR,aAAa,6SAAA,CAAA,eAAA;IACb,aAAa,6SAAA,CAAA,eAAA;IACb,WAAW;QACT,UAAU,6SAAA,CAAA,qBAAA;QACV,OAAO,6SAAA,CAAA,kBAAA;IACT;AACF;AAEA,MAAM,+BAAyD,CAAA,UAC7D,CAAA,GAAA,sQAAA,CAAA,oBAAA,EAAkB;QAAE,GAAG,yBAAA;QAA2B,GAAG,OAAA;IAAQ;AAM/D,MAAM,uBAAuB,CAAA,GAAA,sQAAA,CAAA,oBAAA,EAAkB;AAM/C,MAAM,wBAAwB;IAlD9B,IAAA;IAmDE,IAAI;IAEJ,IAAI;QACF,MAAM,UAAU,CAAA,GAAA,0TAAA,CAAA,mBAAA;QAChB,MAAM,uBAAuB,CAAA,GAAA,ySAAA,CAAA,YAAA,EAAU,SAAS,kSAAA,CAAA,YAAA,CAAU,OAAA,CAAQ,gBAAgB;QAClF,cAAc,CAAA,GAAA,ySAAA,CAAA,0BAAA,EAAwB;IACxC,EAAA,OAAS,KAAK;QACZ,IAAI,OAAO,CAAA,GAAA,0TAAA,CAAA,wBAAA,EAAsB,MAAM;YACrC,MAAM;QACR;IACF;IAGA,MAAM,UAAA,CAAU,KAAA,mTAAA,CAAA,kCAAA,CAAgC,QAAA,EAAS,KAAzC,OAAA,KAA8C;IAC9D,IAAA,CAAI,WAAA,OAAA,KAAA,IAAA,QAAS,SAAA,KAAA,CAAa,WAAA,OAAA,KAAA,IAAA,QAAS,cAAA,GAAgB;QACjD,OAAO,6BAA6B;IACtC;IAEA,OAAO;AACT;AAOA,MAAM,cAAc,IAAI,MAAM,OAAO,MAAA,CAAO,uBAAuB,uBAAuB;IACxF,KAAI,MAAA,EAAQ,IAAA,EAAc,QAAA;QACxB,CAAA,GAAA,gRAAA,CAAA,aAAA,EAAW,yBAAyB;QAEpC,OAAO,QAAQ,GAAA,CAAI,QAAQ,MAAM;IACnC;AACF"}},
    {"offset": {"line": 767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 772, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/nextFetcher.ts"],"sourcesContent":["type Fetcher = typeof globalThis.fetch;\n\n/**\n * Based on nextjs internal implementation https://github.com/vercel/next.js/blob/6185444e0a944a82e7719ac37dad8becfed86acd/packages/next/src/server/lib/patch-fetch.ts#L23\n */\ntype NextFetcher = Fetcher & {\n  readonly __nextPatched: true;\n  readonly __nextGetStaticStore: () => { getStore: () => StaticGenerationAsyncStorage | undefined };\n};\n\n/**\n * Full type can be found https://github.com/vercel/next.js/blob/6185444e0a944a82e7719ac37dad8becfed86acd/packages/next/src/client/components/static-generation-async-storage.external.ts#L4\n */\ninterface StaticGenerationAsyncStorage {\n  readonly pagePath?: string;\n}\n\nfunction isNextFetcher(fetch: Fetcher | NextFetcher): fetch is NextFetcher {\n  return '__nextPatched' in fetch && fetch.__nextPatched === true;\n}\n\nexport { isNextFetcher };\n"],"names":[],"mappings":";;;AAiBA,SAAS,cAAc,KAAA;IACrB,OAAO,mBAAmB,SAAS,MAAM,aAAA,KAAkB;AAC7D"}},
    {"offset": {"line": 780, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 785, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/protect.ts"],"sourcesContent":["import type { AuthObject } from '@clerk/backend';\nimport type { RedirectFun, SignedInAuthObject } from '@clerk/backend/internal';\nimport { constants } from '@clerk/backend/internal';\nimport type {\n  CheckAuthorizationParamsWithCustomPermissions,\n  CheckAuthorizationWithCustomPermissions,\n} from '@clerk/types';\n\nimport { constants as nextConstants } from '../constants';\nimport { isNextFetcher } from './nextFetcher';\n\ntype AuthProtectOptions = { unauthorizedUrl?: string; unauthenticatedUrl?: string };\n\n/**\n * Throws a Nextjs notFound error if user is not authenticated or authorized.\n */\nexport interface AuthProtect {\n  (params?: CheckAuthorizationParamsWithCustomPermissions, options?: AuthProtectOptions): SignedInAuthObject;\n\n  (\n    params?: (has: CheckAuthorizationWithCustomPermissions) => boolean,\n    options?: AuthProtectOptions,\n  ): SignedInAuthObject;\n\n  (options?: AuthProtectOptions): SignedInAuthObject;\n}\n\nexport const createProtect = (opts: {\n  request: Request;\n  authObject: AuthObject;\n  /**\n   * middleware and pages throw a notFound error if signed out\n   * but the middleware needs to throw an error it can catch\n   * use this callback to customise the behavior\n   */\n  notFound: () => never;\n  /**\n   * see {@link notFound} above\n   */\n  redirect: (url: string) => void;\n  /**\n   * protect() in middleware redirects to signInUrl if signed out\n   * protect() in pages throws a notFound error if signed out\n   * use this callback to customise the behavior\n   */\n  redirectToSignIn: RedirectFun<unknown>;\n}): AuthProtect => {\n  const { redirectToSignIn, authObject, redirect, notFound, request } = opts;\n\n  return ((...args: any[]) => {\n    const optionValuesAsParam = args[0]?.unauthenticatedUrl || args[0]?.unauthorizedUrl;\n    const paramsOrFunction = optionValuesAsParam\n      ? undefined\n      : (args[0] as\n          | CheckAuthorizationParamsWithCustomPermissions\n          | ((has: CheckAuthorizationWithCustomPermissions) => boolean));\n    const unauthenticatedUrl = (args[0]?.unauthenticatedUrl || args[1]?.unauthenticatedUrl) as string | undefined;\n    const unauthorizedUrl = (args[0]?.unauthorizedUrl || args[1]?.unauthorizedUrl) as string | undefined;\n\n    const handleUnauthenticated = () => {\n      if (unauthenticatedUrl) {\n        return redirect(unauthenticatedUrl);\n      }\n      if (isPageRequest(request)) {\n        // TODO: Handle runtime values. What happens if runtime values are set in middleware and in ClerkProvider as well?\n        return redirectToSignIn();\n      }\n      return notFound();\n    };\n\n    const handleUnauthorized = () => {\n      if (unauthorizedUrl) {\n        return redirect(unauthorizedUrl);\n      }\n      return notFound();\n    };\n\n    /**\n     * User is not authenticated\n     */\n    if (!authObject.userId) {\n      return handleUnauthenticated();\n    }\n\n    /**\n     * User is authenticated\n     */\n    if (!paramsOrFunction) {\n      return authObject;\n    }\n\n    /**\n     * if a function is passed and returns false then throw not found\n     */\n    if (typeof paramsOrFunction === 'function') {\n      if (paramsOrFunction(authObject.has)) {\n        return authObject;\n      }\n      return handleUnauthorized();\n    }\n\n    /**\n     * Checking if user is authorized when permission or role is passed\n     */\n    if (authObject.has(paramsOrFunction)) {\n      return authObject;\n    }\n\n    return handleUnauthorized();\n  }) as AuthProtect;\n};\n\nconst isServerActionRequest = (req: Request) => {\n  return (\n    !!req.headers.get(nextConstants.Headers.NextUrl) &&\n    (req.headers.get(constants.Headers.Accept)?.includes('text/x-component') ||\n      req.headers.get(constants.Headers.ContentType)?.includes('multipart/form-data') ||\n      !!req.headers.get(nextConstants.Headers.NextAction))\n  );\n};\n\nconst isPageRequest = (req: Request): boolean => {\n  return (\n    req.headers.get(constants.Headers.SecFetchDest) === 'document' ||\n    req.headers.get(constants.Headers.SecFetchDest) === 'iframe' ||\n    req.headers.get(constants.Headers.Accept)?.includes('text/html') ||\n    isAppRouterInternalNavigation(req) ||\n    isPagesRouterInternalNavigation(req)\n  );\n};\n\nconst isAppRouterInternalNavigation = (req: Request) =>\n  (!!req.headers.get(nextConstants.Headers.NextUrl) && !isServerActionRequest(req)) || isPagePathAvailable();\n\nconst isPagePathAvailable = () => {\n  const __fetch = globalThis.fetch;\n  return Boolean(isNextFetcher(__fetch) ? __fetch.__nextGetStaticStore().getStore()?.pagePath : false);\n};\n\nconst isPagesRouterInternalNavigation = (req: Request) => !!req.headers.get(nextConstants.Headers.NextjsData);\n\n// /**\n//  * In case we want to handle router handlers and server actions differently in the future\n//  */\n// const isApiRouteRequest = (req: Request) => {\n//   return !isPageRequest(req) && !isServerActionRequest(req);\n// };\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 854, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 859, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/clerkMiddleware.ts"],"sourcesContent":["import { AsyncLocalStorage } from 'node:async_hooks';\n\nimport type { AuthObject } from '@clerk/backend';\nimport type { AuthenticateRequestOptions, ClerkRequest, RedirectFun, RequestState } from '@clerk/backend/internal';\nimport { AuthStatus, constants, createClerkRequest, createRedirect } from '@clerk/backend/internal';\nimport { eventMethodCalled } from '@clerk/shared/telemetry';\nimport type { NextMiddleware } from 'next/server';\nimport { NextResponse } from 'next/server';\n\nimport { isRedirect, serverRedirectWithAuth, setHeader } from '../utils';\nimport { withLogger } from '../utils/debugLogger';\nimport { clerkClient } from './clerkClient';\nimport { PUBLISHABLE_KEY, SECRET_KEY, SIGN_IN_URL, SIGN_UP_URL } from './constants';\nimport { errorThrower } from './errorThrower';\nimport type { AuthProtect } from './protect';\nimport { createProtect } from './protect';\nimport type { NextMiddlewareEvtParam, NextMiddlewareRequestParam, NextMiddlewareReturn } from './types';\nimport {\n  assertKey,\n  decorateRequest,\n  handleMultiDomainAndProxy,\n  redirectAdapter,\n  setRequestHeadersOnNextResponse,\n} from './utils';\n\nconst CONTROL_FLOW_ERROR = {\n  FORCE_NOT_FOUND: 'CLERK_PROTECT_REWRITE',\n  REDIRECT_TO_URL: 'CLERK_PROTECT_REDIRECT_TO_URL',\n  REDIRECT_TO_SIGN_IN: 'CLERK_PROTECT_REDIRECT_TO_SIGN_IN',\n};\n\nexport type ClerkMiddlewareAuthObject = AuthObject & {\n  protect: AuthProtect;\n  redirectToSignIn: RedirectFun<Response>;\n};\n\nexport type ClerkMiddlewareAuth = () => ClerkMiddlewareAuthObject;\n\ntype ClerkMiddlewareHandler = (\n  auth: ClerkMiddlewareAuth,\n  request: NextMiddlewareRequestParam,\n  event: NextMiddlewareEvtParam,\n) => NextMiddlewareReturn;\n\nexport type ClerkMiddlewareOptions = AuthenticateRequestOptions & { debug?: boolean };\n\n/**\n * Middleware for Next.js that handles authentication and authorization with Clerk.\n * For more details, please refer to the docs: https://clerk.com/docs/references/nextjs/clerk-middleware\n */\ninterface ClerkMiddleware {\n  /**\n   * @example\n   * export default clerkMiddleware((auth, request, event) => { ... }, options);\n   */\n  (handler: ClerkMiddlewareHandler, options?: ClerkMiddlewareOptions): NextMiddleware;\n  /**\n   * @example\n   * export default clerkMiddleware(options);\n   */\n  (options?: ClerkMiddlewareOptions): NextMiddleware;\n  /**\n   * @example\n   * export default clerkMiddleware;\n   */\n  (request: NextMiddlewareRequestParam, event: NextMiddlewareEvtParam): NextMiddlewareReturn;\n}\n\nexport const clerkMiddlewareRequestDataStore = new AsyncLocalStorage<Partial<AuthenticateRequestOptions>>();\n\nexport const clerkMiddleware: ClerkMiddleware = (...args: unknown[]): any => {\n  const [request, event] = parseRequestAndEvent(args);\n  const [handler, params] = parseHandlerAndOptions(args);\n\n  const publishableKey = assertKey(params.publishableKey || PUBLISHABLE_KEY, () =>\n    errorThrower.throwMissingPublishableKeyError(),\n  );\n  const secretKey = assertKey(params.secretKey || SECRET_KEY, () => errorThrower.throwMissingSecretKeyError());\n  const signInUrl = params.signInUrl || SIGN_IN_URL;\n  const signUpUrl = params.signUpUrl || SIGN_UP_URL;\n\n  const options = {\n    ...params,\n    publishableKey,\n    secretKey,\n    signInUrl,\n    signUpUrl,\n  };\n\n  return clerkMiddlewareRequestDataStore.run(options, () => {\n    clerkClient().telemetry.record(\n      eventMethodCalled('clerkMiddleware', {\n        handler: Boolean(handler),\n        satellite: Boolean(options.isSatellite),\n        proxy: Boolean(options.proxyUrl),\n      }),\n    );\n\n    const nextMiddleware: NextMiddleware = withLogger('clerkMiddleware', logger => async (request, event) => {\n      if (params.debug) {\n        logger.enable();\n      }\n      const clerkRequest = createClerkRequest(request);\n      logger.debug('options', options);\n      logger.debug('url', () => clerkRequest.toJSON());\n\n      const requestState = await clerkClient().authenticateRequest(\n        clerkRequest,\n        createAuthenticateRequestOptions(clerkRequest, options),\n      );\n\n      logger.debug('requestState', () => ({\n        status: requestState.status,\n        headers: JSON.stringify(Object.fromEntries(requestState.headers)),\n        reason: requestState.reason,\n      }));\n\n      const locationHeader = requestState.headers.get(constants.Headers.Location);\n      if (locationHeader) {\n        return new Response(null, { status: 307, headers: requestState.headers });\n      } else if (requestState.status === AuthStatus.Handshake) {\n        throw new Error('Clerk: handshake status without redirect');\n      }\n\n      const authObject = requestState.toAuth();\n      logger.debug('auth', () => ({ auth: authObject, debug: authObject.debug() }));\n\n      const redirectToSignIn = createMiddlewareRedirectToSignIn(clerkRequest);\n      const protect = createMiddlewareProtect(clerkRequest, authObject, redirectToSignIn);\n      const authObjWithMethods: ClerkMiddlewareAuthObject = Object.assign(authObject, { protect, redirectToSignIn });\n\n      let handlerResult: Response = NextResponse.next();\n      try {\n        const userHandlerResult = await clerkMiddlewareRequestDataStore.run(options, async () =>\n          handler?.(() => authObjWithMethods, request, event),\n        );\n        handlerResult = userHandlerResult || handlerResult;\n      } catch (e: any) {\n        handlerResult = handleControlFlowErrors(e, clerkRequest, requestState);\n      }\n\n      // TODO @nikos: we need to make this more generic\n      // and move the logic in clerk/backend\n      if (requestState.headers) {\n        requestState.headers.forEach((value, key) => {\n          handlerResult.headers.append(key, value);\n        });\n      }\n\n      if (isRedirect(handlerResult)) {\n        logger.debug('handlerResult is redirect');\n        return serverRedirectWithAuth(clerkRequest, handlerResult, options);\n      }\n\n      if (options.debug) {\n        setRequestHeadersOnNextResponse(handlerResult, clerkRequest, { [constants.Headers.EnableDebug]: 'true' });\n      }\n\n      decorateRequest(clerkRequest, handlerResult, requestState, params);\n\n      return handlerResult;\n    });\n\n    // If we have a request and event, we're being called as a middleware directly\n    // eg, export default clerkMiddleware;\n    if (request && event) {\n      return nextMiddleware(request, event);\n    }\n\n    // Otherwise, return a middleware that can be called with a request and event\n    // eg, export default clerkMiddleware(auth => { ... });\n    return nextMiddleware;\n  });\n};\n\nconst parseRequestAndEvent = (args: unknown[]) => {\n  return [args[0] instanceof Request ? args[0] : undefined, args[0] instanceof Request ? args[1] : undefined] as [\n    NextMiddlewareRequestParam | undefined,\n    NextMiddlewareEvtParam | undefined,\n  ];\n};\n\nconst parseHandlerAndOptions = (args: unknown[]) => {\n  return [\n    typeof args[0] === 'function' ? args[0] : undefined,\n    (args.length === 2 ? args[1] : typeof args[0] === 'function' ? {} : args[0]) || {},\n  ] as [ClerkMiddlewareHandler | undefined, ClerkMiddlewareOptions];\n};\n\nexport const createAuthenticateRequestOptions = (clerkRequest: ClerkRequest, options: ClerkMiddlewareOptions) => {\n  return {\n    ...options,\n    ...handleMultiDomainAndProxy(clerkRequest, options),\n  };\n};\n\nconst createMiddlewareRedirectToSignIn = (\n  clerkRequest: ClerkRequest,\n): ClerkMiddlewareAuthObject['redirectToSignIn'] => {\n  return (opts = {}) => {\n    const err = new Error(CONTROL_FLOW_ERROR.REDIRECT_TO_SIGN_IN) as any;\n    err.returnBackUrl = opts.returnBackUrl === null ? '' : opts.returnBackUrl || clerkRequest.clerkUrl.toString();\n    throw err;\n  };\n};\n\nconst createMiddlewareProtect = (\n  clerkRequest: ClerkRequest,\n  authObject: AuthObject,\n  redirectToSignIn: RedirectFun<Response>,\n): ClerkMiddlewareAuthObject['protect'] => {\n  return ((params, options) => {\n    const notFound = () => {\n      throw new Error(CONTROL_FLOW_ERROR.FORCE_NOT_FOUND) as any;\n    };\n\n    const redirect = (url: string) => {\n      const err = new Error(CONTROL_FLOW_ERROR.REDIRECT_TO_URL) as any;\n      err.redirectUrl = url;\n      throw err;\n    };\n\n    // @ts-expect-error TS is not happy even though the types are correct\n    return createProtect({ request: clerkRequest, redirect, notFound, authObject, redirectToSignIn })(params, options);\n  }) as AuthProtect;\n};\n\n// Handle errors thrown by protect() and redirectToSignIn() calls,\n// as we want to align the APIs between middleware, pages and route handlers\n// Normally, middleware requires to explicitly return a response, but we want to\n// avoid discrepancies between the APIs as it's easy to miss the `return` statement\n// especially when copy-pasting code from one place to another.\n// This function handles the known errors thrown by the APIs described above,\n// and returns the appropriate response.\nconst handleControlFlowErrors = (e: any, clerkRequest: ClerkRequest, requestState: RequestState): Response => {\n  switch (e.message) {\n    case CONTROL_FLOW_ERROR.FORCE_NOT_FOUND:\n      // Rewrite to a bogus URL to force not found error\n      return setHeader(\n        NextResponse.rewrite(`${clerkRequest.clerkUrl.origin}/clerk_${Date.now()}`),\n        constants.Headers.AuthReason,\n        'protect-rewrite',\n      );\n    case CONTROL_FLOW_ERROR.REDIRECT_TO_URL:\n      return redirectAdapter(e.redirectUrl);\n    case CONTROL_FLOW_ERROR.REDIRECT_TO_SIGN_IN:\n      return createRedirect({\n        redirectAdapter,\n        baseUrl: clerkRequest.clerkUrl,\n        signInUrl: requestState.signInUrl,\n        signUpUrl: requestState.signUpUrl,\n        publishableKey: requestState.publishableKey,\n      }).redirectToSignIn({ returnBackUrl: e.returnBackUrl });\n    default:\n      throw e;\n  }\n};\n"],"names":["request","event"],"mappings":"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"}},
    {"offset": {"line": 1047, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1052, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/utils/pathMatchers.ts"],"sourcesContent":["import { pathToRegexp } from 'path-to-regexp';\n\nexport const paths = {\n  toRegexp: (path: string) => {\n    try {\n      return pathToRegexp(path);\n    } catch (e: any) {\n      throw new Error(\n        `Invalid path: ${path}.\\nConsult the documentation of path-to-regexp here: https://github.com/pillarjs/path-to-regexp\\n${e.message}`,\n      );\n    }\n  },\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,QAAQ;IACnB,UAAU,CAAC;QACT,IAAI;YACF,OAAO,CAAA,GAAA,gOAAA,CAAA,eAAA,EAAa;QACtB,EAAA,OAAS,GAAQ;YACf,MAAM,IAAI,MACR,CAAA,cAAA,EAAiB,KAAI;;AAAA,EAAoG,EAAE,OAAO,CAAA,CAAA;QAEtI;IACF;AACF"}},
    {"offset": {"line": 1071, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1076, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/@clerk+nextjs@5.3.6_next@14.2.7_react-dom@18.3.1_react@18.3.1/node_modules/@clerk/nextjs/src/server/routeMatcher.ts"],"sourcesContent":["import type { Autocomplete } from '@clerk/types';\nimport type Link from 'next/link';\nimport type { NextRequest } from 'next/server';\n\nimport { paths } from '../utils';\n\ntype WithPathPatternWildcard<T> = `${T & string}(.*)`;\ntype NextTypedRoute<T = Parameters<typeof Link>['0']['href']> = T extends string ? T : never;\n\ntype RouteMatcherWithNextTypedRoutes = Autocomplete<WithPathPatternWildcard<NextTypedRoute> | NextTypedRoute>;\n\nexport type RouteMatcherParam =\n  | Array<RegExp | RouteMatcherWithNextTypedRoutes>\n  | RegExp\n  | RouteMatcherWithNextTypedRoutes\n  | ((req: NextRequest) => boolean);\n\n/**\n * Returns a function that accepts a `Request` object and returns whether the request matches the list of\n * predefined routes that can be passed in as the first argument.\n *\n * You can use glob patterns to match multiple routes or a function to match against the request object.\n * Path patterns and regular expressions are supported, for example: `['/foo', '/bar(.*)'] or `[/^\\/foo\\/.*$/]`\n * For more information, see: https://clerk.com/docs\n */\nexport const createRouteMatcher = (routes: RouteMatcherParam) => {\n  if (typeof routes === 'function') {\n    return (req: NextRequest) => routes(req);\n  }\n\n  const routePatterns = [routes || ''].flat().filter(Boolean);\n  const matchers = precomputePathRegex(routePatterns);\n  return (req: NextRequest) => matchers.some(matcher => matcher.test(req.nextUrl.pathname));\n};\n\nconst precomputePathRegex = (patterns: Array<string | RegExp>) => {\n  return patterns.map(pattern => (pattern instanceof RegExp ? pattern : paths.toRegexp(pattern)));\n};\n"],"names":[],"mappings":";;;;;;AAyBO,MAAM,qBAAqB,CAAC;IACjC,IAAI,OAAO,WAAW,YAAY;QAChC,OAAO,CAAC,MAAqB,OAAO;IACtC;IAEA,MAAM,gBAAgB;QAAC,UAAU;KAAE,CAAE,IAAA,GAAO,MAAA,CAAO;IACnD,MAAM,WAAW,oBAAoB;IACrC,OAAO,CAAC,MAAqB,SAAS,IAAA,CAAK,CAAA,UAAW,QAAQ,IAAA,CAAK,IAAI,OAAA,CAAQ,QAAQ;AACzF;AAEA,MAAM,sBAAsB,CAAC;IAC3B,OAAO,SAAS,GAAA,CAAI,CAAA,UAAY,mBAAmB,SAAS,UAAU,+SAAA,CAAA,QAAA,CAAM,QAAA,CAAS;AACvF"}},
    {"offset": {"line": 1097, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}